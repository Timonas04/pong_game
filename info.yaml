--- 
# Tiny Tapeout project information
project:
  wokwi_id:    380361576213660673        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Timonas Juonys"      # Your name
  title:        "ping pong asic"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Hardware implemented ping pong for two players on a 16x24 led matrix as a display"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Explain how your project works
      The game uses a up/down counter for x/y for each player plus the ball. Button inputs are stored in input register, so bouncing should not be an issue.
      Game clock is input_clk divided by 4. Rest pin (active low) should be pulsed low at every start up to clear all the clock registers. If this is not done,
      the multiple internal clock divider flip flops might start out wrong, and that could mess up other functions. The ball gets updated with every game_clk pulse, while the padles are updated
      by another clock, the same frequancy as the game clock, but with a phase delay equivalent to one half period of the input_clk. This is done so that the ball doest jump past the padles,
      as could happen if both the padles and the ball were updated simultanuosly.

      Since the led matrix can only light 1 collum or 1 row at any one time, the 3 objects to be lit(padle1, padle2, and the ball) have to be lit for a period of time before the next object is lit.
      this is achieved by the inner multiplexer which is driven byt a mod 3 counter which is driven byt the multiplexer clock. The chip outputs are the outputs of this multiplexer (some logic is done after 
      the multiplexer but it is irrelevant). The x pixels (horizontal axis) is not decoded internally, and thus have to be decoded externally. They are connected as horz0 to horz4 pins. 
      Even though there are 5 bits, the led display is only 24leds wide, so only a 5 to 24 decodes is necesary. The y pixels 

      
      

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project
      To test the prosject hook up 4 buttons for each player, as specified in pin describtion, clk, and an active low reset pin. 
      the outp

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:  
    in_clk = clk
    in_reset = reset (active low)
    in0 = player1_up button
    in1 = player1_down button
    in2 = player1_left button
    in3 = player1_right button
    
    in4 = player2_up button
    in5 = player2_down button
    in6 = player2_left button
    in7 = player2_right button
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    out0 = horz0 (lsd)
    out1 = horz1 binary encoded position in the x direction
    out2 = horz2
    out3 = horz3
    out4 = horz4
    out5 = points player1 pulses when player 1 gets a point
    out6 = points player2
    out7 = vertical pixels shift register out 

# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    D0 = enable vertical pixels shift register
    (when D0 low, shift register ff mirror vertical pixels,
    when D0 high, then the shifting can start)
    D1 = vertical pixels shift register clock
    D2 = not used, pulled low internally
    D3 = not used, pulled low internally
    D4 = multiplexer clock - multiplexes between padle1, padle2, and ball, as the led matrix can only display one at a time
    D5 = not used, pulled low internally
    D6 = not used, pulled low internally
    D7 = not used, pulled low internally
    D5 = not used, pulled low internally


# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
